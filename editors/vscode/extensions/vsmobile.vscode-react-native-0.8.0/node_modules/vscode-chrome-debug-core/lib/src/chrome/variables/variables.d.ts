import Crdp from '../../../crdp/crdp';
import { VariableContext } from '../chromeDebugAdapter';
import { DebugProtocol } from 'vscode-debugprotocol';
import { IVariableContainer } from './variableContainers';
export interface IPropCount {
    indexedVariables: number;
    namedVariables: number;
}
export declare class VariablesService {
    private _crdpClient;
    private _variableHandles;
    constructor(_crdpClient: Crdp.CrdpClient);
    readonly chrome: Crdp.CrdpClient;
    onPaused(): void;
    createLoggedObjectVariableReference(objs: Crdp.Runtime.RemoteObject[]): number;
    createScopeVariableReference(frameId: string, origScopeIndex: number, objectId: string, thisObj?: Crdp.Runtime.RemoteObject, returnValue?: Crdp.Runtime.RemoteObject): number;
    createExceptionVariableReference(exception: Crdp.Runtime.RemoteObject): any;
    createFunctionVariable(name: string, object: Crdp.Runtime.RemoteObject, context: VariableContext, parentEvaluateName?: string): DebugProtocol.Variable;
    remoteObjectToVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName?: string, stringify?: boolean, context?: VariableContext): Promise<DebugProtocol.Variable>;
    createObjectVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName: string, context: VariableContext): Promise<DebugProtocol.Variable>;
    protected createPropertyContainer(object: Crdp.Runtime.RemoteObject, evaluateName: string): IVariableContainer;
    createPrimitiveVariableWithValue(name: string, value: string, parentEvaluateName?: string): DebugProtocol.Variable;
    createPrimitiveVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName?: string, stringify?: boolean): DebugProtocol.Variable;
    propertyDescriptorToVariable(propDesc: Crdp.Runtime.PropertyDescriptor, owningObjectId?: string, parentEvaluateName?: string): Promise<DebugProtocol.Variable>;
    getVariablesForObjectId(objectId: string, evaluateName?: string, filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]>;
    setVariableValue(callFrameId: string, scopeNumber: number, variableName: string, value: string): Promise<string>;
    private getRuntimeProperties(params);
    private getFilteredVariablesForObject(objectId, evaluateName, filter, start, count);
    private getFilteredVariablesForObjectId(objectId, evaluateName, getVarsFn, filter, start, count);
    private internalPropertyDescriptorToVariable(propDesc, parentEvaluateName);
    private getArrayNumPropsByEval(objectId);
    private getBufferNumPropsByEval(objectId);
    private getArrayNumPropsByPreview(object);
    private getCollectionNumPropsByEval(objectId);
    private getCollectionNumPropsByPreview(object);
    private getNumPropsByEval(objectId, getNumPropsFn);
}
export declare class VariableHandles {
    private _variableHandles;
    private _consoleVariableHandles;
    onPaused(): void;
    create(value: IVariableContainer, context?: VariableContext): number;
    get(handle: number): IVariableContainer;
    private getHandles(context);
}
