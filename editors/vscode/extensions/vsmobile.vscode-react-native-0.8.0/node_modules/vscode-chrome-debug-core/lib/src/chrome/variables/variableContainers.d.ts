import { DebugProtocol } from 'vscode-debugprotocol';
import Crdp from '../../../crdp/crdp';
import { VariablesService } from './variables';
export interface IVariableContainer {
    expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]>;
    setValue(name: string, value: string): Promise<string>;
}
export declare abstract class BaseVariableContainer implements IVariableContainer {
    protected varsService: VariablesService;
    protected objectId: string;
    protected evaluateName: string;
    constructor(varsService: VariablesService, objectId: string, evaluateName?: string);
    expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]>;
    setValue(name: string, value: string): Promise<string>;
}
export declare class PropertyContainer extends BaseVariableContainer {
    setValue(name: string, value: string): Promise<string>;
    private setPropertyValue(objectId, propName, value);
}
export declare class LoggedObjectsContainer extends BaseVariableContainer {
    private args;
    constructor(variablesController: VariablesService, args: Crdp.Runtime.RemoteObject[]);
    expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]>;
}
export declare class ScopeContainer extends BaseVariableContainer {
    private _thisObj;
    private _returnValue;
    private _frameId;
    private _origScopeIndex;
    constructor(varsService: VariablesService, frameId: string, origScopeIndex: number, objectId: string, thisObj?: Crdp.Runtime.RemoteObject, returnValue?: Crdp.Runtime.RemoteObject);
    /**
     * Call super then insert the 'this' object if needed
     */
    expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]>;
    setValue(name: string, value: string): Promise<string>;
    private insertRemoteObject(variables, name, obj);
}
export declare class ExceptionContainer extends PropertyContainer {
    protected _exception: Crdp.Runtime.RemoteObject;
    protected constructor(adapter: VariablesService, objectId: string, exception: Crdp.Runtime.RemoteObject);
    /**
     * Expand the exception as if it were a Scope
     */
    static create(adapter: VariablesService, exception: Crdp.Runtime.RemoteObject): ExceptionContainer;
}
/**
 * For when a value is thrown instead of an object
 */
export declare class ExceptionValueContainer extends ExceptionContainer {
    constructor(variablesController: VariablesService, exception: Crdp.Runtime.RemoteObject);
    /**
     * Make up a fake 'Exception' property to hold the thrown value, displayed under the Exception Scope
     */
    expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]>;
}
