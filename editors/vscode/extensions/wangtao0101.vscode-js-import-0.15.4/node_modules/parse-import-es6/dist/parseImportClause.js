'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = parseImportClause;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * split ImportsList by ','
 * here wo do not check the correctness of ImportSpecifiers in ImportsList, just tolerate it
 * @param {*} text
 */
function splitImportsList(text) {
    var list = [];
    list.push.apply(list, _toConsumableArray(text.split(',').map(function (s) {
        return s.trim();
    }).filter(function (s) {
        return s !== '';
    })));
    return list;
}

var idb = '([\\w\\$]+)';
var nsi = '(\\*\\sas\\s[\\w\\$]+)';
var ni = '\\{(.*)\\}';

/**
 * https://tc39.github.io/ecma262/#prod-ImportClause
 * support tc39 ImportClause exclude nexted ImportsList
 * @param {*} importClause, which has been trimed by word
 */
function parseImportClause(importClause) {
    var regexp = new RegExp('(?:^' + idb + '\\s*,\\s*' + nsi + '$)|(?:^' + idb + '\\s*,\\s*' + ni + '$)|^' + idb + '$|^' + nsi + '$|^' + ni + '$');
    var importedDefaultBinding = null;
    var nameSpaceImport = null;
    var namedImports = [];
    var res = importClause.match(regexp);
    if (res == null) {
        return null;
    }
    if (res[1]) {
        importedDefaultBinding = res[1];
        nameSpaceImport = res[2];
    } else if (res[3]) {
        importedDefaultBinding = res[3];
        namedImports = splitImportsList(res[4]);
    } else if (res[5]) {
        importedDefaultBinding = res[5];
    } else if (res[6]) {
        nameSpaceImport = res[6];
    } else {
        namedImports = splitImportsList(res[7]);
    }
    return {
        importedDefaultBinding: importedDefaultBinding,
        nameSpaceImport: nameSpaceImport,
        namedImports: namedImports
    };
}